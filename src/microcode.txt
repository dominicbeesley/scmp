# test microcode file
SECTION:NEXTPC,SIGNED,8
	NEXT='d1*
#MAKE SURE THE TWO FOLLOWING SECTION MATCH
SECTION:COND_MASK,BITMAP,5
	NUL=NUL*
	OP2='b10000
# ADI tests for immediate operations on bits 2:0 of the opcode
	ADI='b01110	
	JMP='b00001
SECTION:COND_XOR,BITMAP,5
	NUL=NUL*
	OP2='b00000
	ADI='b01000
	JMP='b00000
SECTION:BUS,BITMAP,7
	NUL=NUL*
	WR
	RD
	ADS
	FLG_R
	FLG_I
	FLG_D
	FLG_H
	ADSOP=ADS|FLG_R|FLG_I
	ADSRD=ADS|FLG_R
	ADSWR=ADS
SECTION:LD_L,BITMAP,12
	NUL=NUL*
	P0
	P1
	P2
	P3
	ADDR
	ACC
	EXT
	STAT
	D
	OP
	ST_ALU
	EA
	ADDR_PC=P0|ADDR
	D_ACC=D|ACC
SECTION:LD_H,BITMAP,6
	NUL=NUL*
	P0
	P1
	P2
	P3
	ADDR
	EA
	ADDR_PC=P0|ADDR
SECTION:RD_L,ONEHOT,10
	P0*
	P1
	P2
	P3
	ADDR
	ACC
	EXT
	STATUS
	D
	EA
SECTION:RD_H,ONEHOT,6
	P0*
	P1
	P2
	P3
	ADDR
	EA
SECTION:WR_L,ONEHOT,3
	RD_H
	RD_L*
	ALU
SECTION:WR_H,ONEHOT,3
	RD_H*
	RD_L
	INCR4
SECTION:ALU_OP,INDEX,4
	NUL='b0000*
	NUL1='b0001
	AND='b0010
	OR='b0011
	XOR='b0100
	DA='b0101
	ADD='b0110
	CAD='b0111
	SR='b1000
	SRL='b1001
	RR='b1010
	RRL='b1011
	INC='b1100
	DEC='b1101

SECTION:CTL,BITMAP,2
	NUL=NUL*
	DECODE
	LOGICOP

CODESTART

RESET:
FETCH:
	LD_L=ADDR_PC, LD_H=ADDR_PC, RD_L=P0, RD_H=P0, WR_L=ALU, WR_H=INCR4, ALU_OP=INC
	BUS=ADSOP
	BUS=RD, LD_L=OP
	NEXTPC=@DECODE, COND_MASK=OP2, COND_XOR=OP2
	LD_L=ADDR_PC, LD_H=ADDR_PC, RD_L=P0, RD_H=P0, WR_L=ALU, WR_H=INCR4, ALU_OP=INC
	BUS=ADSRD
	BUS=RD, LD_L=D
DECODE:
#decode step will jump to the instruction see scmp_microcode_oppc.sv
	CTL=DECODE

# all loads lead to here and also all logical ops
LD:	
# test for LDI
	NEXTPC=@LDI, COND_MASK=ADI, COND_XOR=ADI
	LD_L=EA, LD_H=EA, RD_L=EA, RD_H=EA, WR_L=ALU, WR_H=INCR4, ALU_OP=ADD
	BUS=ADSRD
	BUS=RD, LD_L=D
# TODO: all are load immediate!
LDI:
	WR_L=ALU, RD_L=ACC, LD_L=ACC, NEXTPC=UCLBL_FETCH, CTL=LOGICOP
ST:
	LD_L=EA, LD_H=EA, RD_L=EA, RD_H=EA, WR_L=ALU, WR_H=INCR4, ALU_OP=ADD
	BUS=ADSWR, WR_L=RD_L, LD_L=D, RD_L=ACC
	BUS=WR, NEXTPC=UCLBL_FETCH
DLD:
	LD_L=ADDR, LD_H=ADDR, RD_L=EA, RD_H=EA, WR_L=ALU, WR_H=INCR4, ALU_OP=ADD
	BUS=ADSRD
	BUS=RD, LD_L=D
	LD_L=D_ACC, WR_L=ALU, ALU_OP=DEC, RD_L=D
	BUS=ADSWR, WR_L=ALU, LD_L=D, RD_L=ACC
	BUS=WR, NEXTPC=UCLBL_FETCH
ILD:
	LD_L=ADDR, LD_H=ADDR, RD_L=EA, RD_H=EA, WR_L=ALU, WR_H=INCR4, ALU_OP=ADD
	BUS=ADSRD
	BUS=RD, LD_L=D
	LD_L=D_ACC, ALU_OP=INC, RD_L=D
	BUS=ADSWR, WR_L=ALU, LD_L=D, RD_L=ACC
	BUS=WR, NEXTPC=UCLBL_FETCH
JMP:	
	COND_MASK=JMP, COND_XOR=JMP, NEXTPC=UCLBL_FETCH
	LD_L=ADDR_PC, LD_H=ADDR_PC, RD_L=EA, RD_H=EA, WR_L=ALU, WR_H=INCR4, ALU_OP=ADD, NEXTPC=UCLBL_FETCH

